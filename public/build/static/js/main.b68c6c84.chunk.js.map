{"version":3,"sources":["components/404/index.js","api.js","axios.js","img/logo2.png","components/home/index.js","components/episode/index.js","firebase.js","components/serie/index.js","components/episodes/index.js","components/style.js","components/homePage/modal.js","components/homePage/index.js","components/episodes/controls.js","components/videoPlayer/index.js","App.js","index.js"],"names":["notFound","props","id","to","api","axios","create","baseURL","axiosInstance","Component","Episode","handleDuration","duration","setState","handleProgress","state","playedSeconds","_nextEp","nextEpisode","getEpisode","history","push","pathname","query","isToseek","seeking","saveInLocalStorage","currentSeason","currentEp","ref","player","episode","ep","match","params","episodeComplete","nextEpisodeAvaliable","prevsEpisodeAvaliable","prevsEpisode","isUrl","bind","handleSeek","this","console","log","sessionStorage","seasonsFormated","JSON","parse","getItem","length","substring","indexOf","season","teste","filter","_ep","season_number","find","_val","episode_number","prevEpisode","episodes","error","localStorage","setItem","getHistory","_jsonParsse","e","_json","stringify","_item","time","location","undefined","_findHitory","seekTo","parseFloat","className","name","onClick","playing","onStart","controls","width","height","url","onProgress","onDuration","render","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","err","a","_data","firestore","collection","get","then","snapshot","forEach","data","_nameSerie","doc","set","merge","_listSnapshot","_onValue","Serie","useState","seasonSelected","setData","loading","setLoading","setError","isWatched","currentEpisode","progressBar","_epWatched","_progess","transformSeasonsInLanguagePt","_episode","seasonsFormatedPt","useEffect","api_key","process","append_to_response","language","firebase","getSeries","_serie","getEpisodes","_episodes","index","seasons","_rep","idMaze","response","Set","_embedded","map","item","Array","from","seasonCurrent","number","seasonCurrentPt","summary","replace","_result","src","style","backgroundImage","image","original","overview","value","onChange","event","target","_value","medium","itemsToShow","pagination","itemPadding","Episodes","setPlayer","_url","episodesDub","serieName","_jsonSeason","_jsonEpisode","Object","keys","values","_player","_serieName","_findHistory","Main","styled","main","SizedBox","div","ModalInfo","HeroImage","BoxEpisodioAtual","SeriesBox","LogoTitle","h1","Title","h2","Card","completed","createMuiTheme","palette","primary","secondary","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","theme","Homepage","setOpen","setModalSerie","onOpenModal","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","hasHistory","getAllSeries","allSeries","randomSerie","Math","floor","random","randomSerieComplete","banner","replaceAll","genres","count","vote_average","edit","size","isHalf","activeColor","Grid","ButtonGroup","disableElevation","variant","color","aria-label","Button","fontSize","slidesPerView","navigation","makeStyles","controlsWrapper","visibility","position","top","left","right","bottom","background","display","flexDirection","justifyContent","button","margin","spacing","controlIcons","transform","bottomIcons","volumeSlider","withStyles","root","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","borderRadius","rail","Slider","playerWrapper","topControls","padding","middleControls","alignItems","bottomWrapper","bottomControls","Videoplayer","App","exact","path","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b68c6c84.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nexport default function notFound(props){\r\n    return(\r\n        <div id=\"notFound\">\r\n            <h1>\r\n                404\r\n            </h1>\r\n            <h5>Desculpe! página não encontrada</h5>\r\n            <Link to='/'>\r\n                Voltar para página principal\r\n            </Link>\r\n        </div>\r\n    );\r\n}","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.tvmaze.com/shows/'\r\n})\r\n\r\nexport default api;","import axios from 'axios';\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/tv/'\r\n})\r\n\r\nexport default axiosInstance;","export default __webpack_public_path__ + \"static/media/logo2.f9fb3bbe.png\";","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Carousel from 'react-elastic-carousel'\r\nimport api from '../../api';\r\nimport axiosInstance from '../../axios';\r\nimport logo from '../../img/logo2.png';\r\nimport './style.css'\r\n\r\nexport default class Home extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            seasons: [],\r\n            seasonsFormated: [],\r\n            seasonsFormatedPt: [],\r\n            seasonSelected: 1,\r\n            seasonCurrent: {},\r\n            seasonCurrentPt: {},\r\n            isLoaded: false,\r\n            width: window.innerWidth\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.isWatched = this.isWatched.bind(this);\r\n        this.handleResize = this.handleResize.bind(this);\r\n        this.progressBar = this.progressBar.bind(this);\r\n        this.transformSeasonsInLanguagePt = this.transformSeasonsInLanguagePt.bind(this)\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let params = {\r\n            api_key: process.env.REACT_APP_API_KEY,\r\n            append_to_response: 'season/1,season/2,season/3,season/4,season/5,season/6,season/7,season/8,season/9,season/10',\r\n            language: 'pt'\r\n        }\r\n        const _rep = await axiosInstance.get('/1668',{params});\r\n        let seasonsFormatedPt = [];\r\n        for (let index = 1; index <= 10; index++) {\r\n            seasonsFormatedPt.push(..._rep.data[`season/${index}`].episodes)\r\n            \r\n        }\r\n        let state = this.state;\r\n        const response = await api.get('friends&embed=episodes');\r\n        let seasons = new Set(response.data._embedded.episodes.map(item => item.season))\r\n        let seasonsFormated = response.data._embedded.episodes;\r\n        state.seasonsFormatedPt = seasonsFormatedPt;\r\n        state.seasonsFormated = seasonsFormated;\r\n        state.seasons = Array.from(seasons);\r\n        if(localStorage.season != undefined && localStorage.episode != undefined){\r\n            state.seasonCurrent = seasonsFormated\r\n                .filter(_episode => _episode.season == localStorage.season)\r\n                .find((_item)=>_item.number == localStorage.episode)\r\n            state.seasonCurrentPt = seasonsFormatedPt\r\n            .filter(_episode => _episode.season_number == localStorage.season)\r\n            .find((_item)=>_item.episode_number == localStorage.episode)\r\n        }else{\r\n            state.seasonCurrent = seasonsFormated[0]\r\n            state.seasonCurrentPt = seasonsFormatedPt[0]\r\n        }\r\n        state.isLoaded = true;\r\n        if(sessionStorage.getItem('seasonsFormatedPt') == null){\r\n            sessionStorage.setItem(\r\n                'seasonsFormatedPt',\r\n                JSON.stringify(seasonsFormatedPt)\r\n            )\r\n        }\r\n        state.seasonCurrent.summary = state.seasonCurrent.summary.replace('<p>','').replace('</p>','');\r\n        window.addEventListener('resize', this.handleResize)\r\n        this.setState(state);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize)\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({seasonSelected: event.target.value});\r\n    }\r\n\r\n    handleResize = () => this.setState({\r\n        width: window.innerWidth\r\n    });\r\n\r\n    isWatched(episode,currentSeason,currentEpisode){\r\n        try {\r\n            const history = JSON.parse(episode)\r\n            return (history.filter(_item => _item.season == currentSeason)\r\n                .find(_item => _item.episode == currentEpisode));\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    progressBar(episode,currentSeason,currentEpisode){\r\n        const _epWatched = this.isWatched(episode,currentSeason,currentEpisode);\r\n        let _progess = 0\r\n        if(_epWatched){\r\n            _progess = _epWatched ? ((_epWatched.time*100) / _epWatched.duration) : 0\r\n        }\r\n\r\n        return _progess;\r\n    }\r\n\r\n    ref = player => {\r\n        this.player = player\r\n    }\r\n\r\n    transformSeasonsInLanguagePt(_episode){\r\n        return this.state.seasonsFormatedPt[this.state.seasonsFormated.indexOf(_episode)]\r\n    }\r\n\r\n    render(){\r\n        const {seasonsFormated,isLoaded} = this.state;\r\n        if(isLoaded){\r\n            return(\r\n                <main>\r\n                    <div id='logoFriends'>\r\n                       <img src={`https://fontmeme.com/permalink/210223/15ed6c36d847a78fd15ef9790d365d80.png`}></img>\r\n                    </div>\r\n                    <Link id=\"episodioAtual\"\r\n                        style={{backgroundImage: `url(${this.state.seasonCurrent.image.original})`}}\r\n                        to={`episodio/${this.state.seasonCurrent.season}x${this.state.seasonCurrent.number}`}\r\n                    >\r\n                        <h1>{`${this.state.seasonCurrent.number}. ${this.state.seasonCurrentPt.name}`}</h1>\r\n                        <h5>{`${this.state.seasonCurrent.season}º Temporada`}</h5>\r\n                        <p>{this.state.seasonCurrentPt.overview}</p>\r\n                    </Link>\r\n                    <div id=\"boxEpisodioAtual\"></div>\r\n                    <div id=\"boxEpisodios\">\r\n                        <select id=\"temporada\"\r\n                            value={this.state.seasonSelected}\r\n                            onChange={this.handleChange}>\r\n                            {\r\n                                this.state.seasons\r\n                                .map((_value)=>(\r\n                                    <option\r\n                                        value={_value}\r\n                                        key={_value}\r\n                                    >\r\n                                        {`${_value}º Temporada`}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n\r\n                        <section id=\"episodios\">\r\n                            {\r\n                                this.state.width <= 600 ?\r\n                                <div  className = 'episodesList'>\r\n                                    {\r\n                                        seasonsFormated.\r\n                                        filter(_episode => _episode.season == this.state.seasonSelected)\r\n                                        .map((_value)=>(\r\n                                            <div key = {_value.name} className=\"episodioDiv\">\r\n                                                <Link to={{pathname:`episodio/${_value.season}x${_value.number}`}}\r\n                                                    className={`episodio  ${this.isWatched(localStorage.history,_value.season,_value.number)?'isWatched':''}`}\r\n                                                    style={{backgroundImage: `url(${_value.image.medium})`}}\r\n                                                >\r\n                                                    {\r\n                                                        this.isWatched(localStorage.history,_value.season,_value.number) ?\r\n                                                        <div\r\n                                                            className='episodeProgress'\r\n                                                            style={\r\n                                                                {\r\n                                                                    width: `${this.progressBar(localStorage.history,_value.season,_value.number)}%`\r\n                                                                }\r\n                                                            }>\r\n                                                        </div>\r\n                                                        :\r\n                                                        <div></div>\r\n\r\n                                                    }\r\n                                                </Link>\r\n                                                <h6>{`${_value.number}. ${_value.name}`}</h6>\r\n                                                <p>{this.transformSeasonsInLanguagePt(_value).overview}</p>\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div> :\r\n                                <Carousel\r\n                                    className = 'episodesCarrousel'\r\n                                    itemsToShow={this.state.width <= 992 ? 3 : 4}\r\n                                    pagination={false}\r\n                                    itemPadding={this.state.width ? [5, 5]:[10, 10]}\r\n                                    >\r\n                                    {\r\n                                        seasonsFormated.\r\n                                        filter(_episode => _episode.season == this.state.seasonSelected)\r\n                                        .map((_value)=>(\r\n                                            <div key = {_value.name} className=\"episodioDiv\">\r\n                                                <Link to={{pathname:`episodio/${_value.season}x${_value.number}`}}\r\n                                                    className={`episodio  ${this.isWatched(localStorage.history,_value.season,_value.number)?'isWatched':''}`}\r\n                                                    style={{backgroundImage: `url(${_value.image.medium})`}}\r\n                                                >\r\n                                                    {\r\n                                                        this.isWatched(localStorage.history,_value.season,_value.number) ?\r\n                                                        <div\r\n                                                            className='episodeProgress'\r\n                                                            style={\r\n                                                                {\r\n                                                                    width: `${this.progressBar(localStorage.history,_value.season,_value.number)}%`\r\n                                                                }\r\n                                                            }>\r\n                                                        </div>\r\n                                                        :\r\n                                                        <div></div>\r\n\r\n                                                    }\r\n                                                </Link>\r\n                                                <h6>{`${_value.number}. ${this.transformSeasonsInLanguagePt(_value).name}`}</h6>\r\n                                                <p>{this.transformSeasonsInLanguagePt(_value).overview}</p>\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </Carousel>\r\n                            }\r\n\r\n                        </section>\r\n                    </div>\r\n                </main>\r\n\r\n            );\r\n        }else{\r\n            return(<div></div>)\r\n        }\r\n\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Link, Redirect, Route } from 'react-router-dom';\r\nimport ReactPlayer from 'react-player';\r\nimport json from '../../json';\r\n\r\nimport './style.css';\r\n\r\nexport default class Episode extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            episode: 29939,\r\n            currentEp:0,\r\n            currentSeason:0,\r\n            ep: '',\r\n            duration: 0,\r\n            id: this.props.match.params.id,\r\n            nextEpisode: 0,\r\n            episodeComplete:{},\r\n            nextEpisodeAvaliable: true,\r\n            prevsEpisodeAvaliable: false,\r\n            prevsEpisode: 0,\r\n            seeking: true,\r\n            isUrl: true,\r\n        }\r\n        this.getEpisode = this.getEpisode.bind(this)\r\n        this.saveInLocalStorage = this.saveInLocalStorage.bind(this)\r\n        this.handleDuration = this.handleDuration.bind(this)\r\n        this.handleProgress = this.handleProgress.bind(this)\r\n        this.handleSeek = this.handleSeek.bind(this)\r\n        this.isToseek = this.isToseek.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getEpisode()\r\n        console.log(sessionStorage)\r\n        \r\n    }\r\n\r\n    getEpisode(id = this.props.match.params.id){\r\n        let state = this.state;\r\n        const seasonsFormated = JSON.parse(sessionStorage.getItem('seasonsFormatedPt'));\r\n        state.id = id\r\n        const length = state.id.length;\r\n        const episode = state.id.substring(state.id.indexOf('x')+1,length);\r\n        const season = state.id.substring(0,state.id.indexOf('x'));\r\n        state.currentEp = episode;\r\n        state.currentSeason = season;\r\n        try {\r\n            const teste = seasonsFormated\r\n                    .filter(_ep => _ep.season_number == season)\r\n                    .find(_val => _val.episode_number == episode);\r\n            if(teste != null){\r\n                const indexOf = seasonsFormated.indexOf(teste);\r\n                state.episodeComplete = teste;\r\n                state.nextEpisodeAvaliable = seasonsFormated[indexOf+1] != null ? true : false;\r\n                state.prevsEpisodeAvaliable = seasonsFormated[indexOf-1] != null ? true : false;\r\n                if(state.nextEpisodeAvaliable){\r\n                    state.nextEpisode = seasonsFormated[indexOf+1].season_number + 'x' + seasonsFormated[indexOf+1].episode_number;\r\n                }\r\n                if(state.prevsEpisodeAvaliable){\r\n                    state.prevEpisode = seasonsFormated[indexOf-1].season_number + 'x' + seasonsFormated[indexOf-1].episode_number;\r\n                }\r\n                //state.ep = json[indexOf];\r\n                state.ep = JSON.parse(sessionStorage.episodes)[indexOf];\r\n                if(!state.seeking){\r\n                    this.saveInLocalStorage(season,episode,0,100)\r\n                }\r\n            }else{\r\n                state.isUrl = false;\r\n            }\r\n        } catch (error) {\r\n           state.isUrl = false; \r\n        }\r\n        this.setState(state);\r\n    }\r\n    \r\n    saveInLocalStorage(season,episode,playedSeconds,duration){\r\n        localStorage.setItem('episode',episode);\r\n        localStorage.setItem('season',season);\r\n        let getHistory = [];\r\n        let _jsonParsse = [];\r\n        try {\r\n            _jsonParsse = JSON.parse(localStorage.history);\r\n            getHistory = _jsonParsse; \r\n        } catch(e) {\r\n            getHistory = []\r\n        }\r\n        const _json = {'episode': episode,'season':season,'time': playedSeconds,'duration':duration};\r\n        if(localStorage.history == null || localStorage.history.length == 0){\r\n            getHistory.push(_json);\r\n            localStorage.setItem('history', JSON.stringify(getHistory))\r\n        }else{\r\n            if(!(_jsonParsse.filter(_item => _item.season == _json.season)\r\n                .find(_item => _item.episode == _json.episode))){\r\n                getHistory.push(_json);\r\n            }else{\r\n                const _ep = _jsonParsse.filter(_item => _item.season == _json.season)\r\n                .find(_item => _item.episode == _json.episode);\r\n                _ep.time = playedSeconds;\r\n                _ep.duration = duration;\r\n                \r\n                getHistory = _jsonParsse;\r\n            }\r\n            localStorage.setItem('history', JSON.stringify(getHistory))\r\n        }\r\n    }\r\n\r\n    handleDuration = (duration) => {\r\n        this.setState({ duration })\r\n    }\r\n\r\n    isToseek(){\r\n        const {location} = this.props;\r\n        if(location.query != undefined && !location.query.isToseek){\r\n            return location.query.isToseek\r\n        }\r\n        return true;\r\n    }\r\n\r\n    handleProgress = state => {\r\n        if(state.playedSeconds == this.state.duration){\r\n            const _nextEp = this.state.nextEpisode;\r\n            if(_nextEp){\r\n                this.getEpisode(_nextEp)\r\n                this.props.history.push({pathname: `/episodio/${_nextEp}`, query: {isToseek: false}})\r\n            }\r\n        }\r\n        if (!this.state.seeking) {\r\n            this.saveInLocalStorage(\r\n                this.state.currentSeason,\r\n                this.state.currentEp,\r\n                state.playedSeconds,\r\n                this.state.duration\r\n            )\r\n          this.setState(state)\r\n        }\r\n    }\r\n    \r\n    handleSeek(){\r\n        if(this.isToseek()){\r\n            let _jsonParsse;\r\n            try {\r\n                _jsonParsse = JSON.parse(localStorage.history);\r\n                \r\n            } catch(e) {\r\n                _jsonParsse = []\r\n            }\r\n            const _findHitory = _jsonParsse.filter(_item => _item.season == this.state.episodeComplete.season_number)\r\n                .find(_item => _item.episode == this.state.episodeComplete.episode_number);\r\n            if(_findHitory){\r\n                this.setState({seeking: false})\r\n                if(!(_findHitory.duration - _findHitory.time <= 50)){\r\n                    this.player.seekTo(parseFloat(_findHitory.time))\r\n                }\r\n            }else{\r\n                this.setState({seeking: false})\r\n            }\r\n        }else{\r\n            this.setState({seeking: false})\r\n        }\r\n        \r\n    }\r\n\r\n    ref = player => {\r\n        this.player = player\r\n    }\r\n\r\n    render(){\r\n        if(this.state.isUrl){\r\n            return(\r\n                <div id='episodeByID'>\r\n                    <div id=\"episodeInfo\">\r\n                        <Link to={`/`}>\r\n                            <span className=\"material-icons\">\r\n                                arrow_back\r\n                            </span>\r\n                        </Link>\r\n                        <div>\r\n                            {<h2 id=\"episodeName\">\r\n                                {`${this.state.episodeComplete.episode_number}. ${this.state.episodeComplete.name}`}\r\n                            </h2>}\r\n                            {<p id=\"episodeSeason\">\r\n                                {`${this.state.episodeComplete.season_number}º Temporada`}\r\n                            </p>}\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"episodeContent\">\r\n                        <Link to={`${this.state.prevEpisode}`} onClick={()=>{\r\n                            this.getEpisode(this.state.prevEpisode)\r\n                        }} className={`${this.state.prevsEpisodeAvaliable ? '':'isDisable'} btn btnPrev`}>\r\n                            <span className=\"material-icons\">\r\n                                keyboard_arrow_left\r\n                            </span>\r\n                        </Link>\r\n                        <ReactPlayer\r\n                            ref={this.ref}\r\n                            playing\r\n                            className='videoPlayer'\r\n                            onStart = {this.handleSeek}\r\n                            controls={true}\r\n                            width='65%'\r\n                            height=\"450px\"  \r\n                            url={this.state.ep} \r\n                            onProgress={this.handleProgress}\r\n                            onDuration={this.handleDuration}\r\n                        />\r\n                        <Link to={`${this.state.nextEpisode}`} onClick={()=>{\r\n                            this.getEpisode(this.state.nextEpisode)\r\n                        }} className={`${this.state.nextEpisodeAvaliable ? '':'isDisable'} btn btnNext`}>\r\n                            <span className=\"material-icons\">\r\n                                keyboard_arrow_right\r\n                            </span>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                \r\n            )\r\n        }else{\r\n            return(\r\n                <Route render={props=>(\r\n                    <Redirect to=\"/nao-econtrada\" />\r\n                )} />\r\n            )\r\n        }\r\n        \r\n    }\r\n}","import app from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nlet firebaseConfig = {\r\n    apiKey: \"AIzaSyDvxpZ9rO_UDkbd8N3320kHdzwnfbcUENA\",\r\n    authDomain: \"gfhdfgdfg-9ebb5.firebaseapp.com\",\r\n    databaseURL: \"https://gfhdfgdfg-9ebb5.firebaseio.com\",\r\n    projectId: \"gfhdfgdfg-9ebb5\",\r\n    storageBucket: \"gfhdfgdfg-9ebb5.appspot.com\",\r\n    messagingSenderId: \"469873401067\",\r\n    appId: \"1:469873401067:web:0f13e2074d3e88c3a8b2ae\"\r\n  };\r\n\r\n\r\nexport default new class Firebase{\r\n\r\n    constructor(){\r\n        if(!app.initializeApp.length){\r\n            try {\r\n                app.initializeApp(firebaseConfig)\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    async getAllSeries(){\r\n        let _data = [];\r\n        await app.firestore().collection('series')\r\n        .get().then((snapshot)=>{\r\n            snapshot.forEach(e=>{\r\n                _data.push(e.data());\r\n            })\r\n        })\r\n        return _data;\r\n    }\r\n\r\n    async getSeries(_nameSerie){\r\n        let _data = {}\r\n        await app.firestore().collection('series')\r\n        .doc(_nameSerie)\r\n        .get().then((snapshot)=>{\r\n            _data = snapshot.data()\r\n        })\r\n        \r\n        return _data;\r\n    }\r\n\r\n    setSeasons(_nameSerie,_data){\r\n        app.firestore().collection('series')\r\n        .doc(_nameSerie)\r\n        .collection('episodes')\r\n        .doc()\r\n        .set(_data, { merge: true })   \r\n    }\r\n\r\n    async getEpisodes(_nameSerie){\r\n        let _data = [];\r\n        await app.firestore().collection('series')\r\n        .doc(_nameSerie)\r\n        .collection('episodes')\r\n        .get().then(async (snapshot)=> {\r\n            let _listSnapshot = [];\r\n            snapshot.forEach(_onValue => {\r\n                _listSnapshot.push(_onValue.data())\r\n            });\r\n            _data.push(..._listSnapshot);\r\n            \r\n        })\r\n        return _data[0];\r\n    }\r\n\r\n\r\n}","import React, {useEffect,useState} from 'react';\r\nimport NotFound from '../404';\r\nimport { Link } from 'react-router-dom';\r\nimport Carousel from 'react-elastic-carousel'\r\nimport api from '../../api';\r\nimport axiosInstance from '../../axios';\r\nimport firebase from '../../firebase'\r\nimport json from '../../json'\r\n\r\nexport default function Serie(props){\r\n\r\n  const [data,setData] = useState({seasonSelected: 1});\r\n  const [loading,setLoading] = useState(true);\r\n  const [error,setError] = useState(false);\r\n\r\n  function handleData(_data){\r\n    setData({...data,..._data})\r\n  }\r\n\r\n  function handleChange(event) {\r\n    setData({...data,seasonSelected: event.target.value});\r\n  }\r\n\r\n  function isWatched(episode,currentSeason,currentEpisode){\r\n      try {\r\n          const history = JSON.parse(episode)\r\n         return (history[props.match.params.name].filter(_item => _item.season == currentSeason)\r\n               .find(_item => _item.episode == currentEpisode));\r\n      } catch (error) {\r\n          return false;\r\n      }\r\n  }\r\n\r\n  function progressBar(episode,currentSeason,currentEpisode){\r\n      const _epWatched = isWatched(episode,currentSeason,currentEpisode);\r\n      let _progess = 0\r\n      if(_epWatched){\r\n          _progess = _epWatched ? ((_epWatched.time*100) / _epWatched.duration) : 0\r\n      }\r\n\r\n      return _progess;\r\n  }\r\n\r\n  function transformSeasonsInLanguagePt(_episode){\r\n      return data.seasonsFormatedPt[data.seasonsFormated.indexOf(_episode)]\r\n  }\r\n\r\n  useEffect(()=>{\r\n    let params = {\r\n      api_key: process.env.REACT_APP_API_KEY,\r\n      append_to_response: '',\r\n      language: 'pt-br'\r\n    }\r\n    const _result = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const _serie = await firebase.getSeries(`${props.match.params.name}`);\r\n        const _episodes = await firebase.getEpisodes(`${props.match.params.name}`);\r\n        console.log(_serie)\r\n        if(_serie != null && _serie.length != 0){\r\n          for (let index = 1; index <= _serie.seasons; index++) {\r\n            params.append_to_response = `${params.append_to_response},season/${index}`;\r\n          }\r\n          const _rep = await axiosInstance.get(`${_serie.id}`,{params});\r\n          let seasonsFormatedPt = [];\r\n          for (let index = 1; index <= _serie.seasons; index++) {\r\n              seasonsFormatedPt.push(..._rep.data[`season/${index}`].episodes)\r\n          }\r\n          const response = await api.get(`${_serie.idMaze}?embed=episodes`);\r\n          let data = {};\r\n          let seasons = new Set(response.data._embedded.episodes.map(item => item.season))\r\n          let seasonsFormated = response.data._embedded.episodes;\r\n          data.seasonsFormatedPt = seasonsFormatedPt;\r\n          data.seasonsFormated = seasonsFormated;\r\n          data.seasons = Array.from(seasons);\r\n          if(localStorage.season != undefined && localStorage.episode != undefined){\r\n              data.seasonCurrent = seasonsFormated\r\n                  .filter(_episode => _episode.season == localStorage.season)\r\n                  .find((_item)=>_item.number == localStorage.episode)\r\n              data.seasonCurrentPt = seasonsFormatedPt\r\n              .filter(_episode => _episode.season_number == localStorage.season)\r\n              .find((_item)=>_item.episode_number == localStorage.episode)\r\n          }else{\r\n              console.log(seasonsFormated);\r\n              data.seasonCurrent = seasonsFormated[0]\r\n              data.seasonCurrentPt = seasonsFormatedPt[0]\r\n          }\r\n          sessionStorage.episodes = JSON.stringify(_episodes);\r\n          sessionStorage.setItem(\r\n            'seasonsFormatedPt',\r\n            JSON.stringify(seasonsFormatedPt)\r\n        )\r\n          data.seasonCurrent.summary = data.seasonCurrent.summary.replace('<p>','').replace('</p>','');\r\n          handleData(data);\r\n        }else{\r\n          throw 'error'\r\n        }\r\n      } catch (error) {\r\n        setError(true);\r\n      }finally{\r\n        setLoading(false)\r\n      }\r\n      \r\n    }\r\n    _result();\r\n  },[]);\r\n\r\n  async function setInFirebase(data){\r\n    await firebase.setSeasons('friends',data);\r\n  }\r\n\r\n  if(!error){\r\n    if(!loading){\r\n      const {seasonsFormated} = data;\r\n      return(\r\n        <main>\r\n            <div id='logoFriends'>\r\n               <img src={`https://fontmeme.com/permalink/210223/15ed6c36d847a78fd15ef9790d365d80.png`}></img>\r\n            </div>\r\n            <Link id=\"episodioAtual\"\r\n                style={{backgroundImage: `url(${data.seasonCurrent.image.original})`}}\r\n                to={`${props.match.params.name}/${data.seasonCurrent.season}x${data.seasonCurrent.number}`}\r\n            >\r\n                <h1>{`${data.seasonCurrent.number}. ${data.seasonCurrentPt.name}`}</h1>\r\n                <h5>{`${data.seasonCurrent.season}º Temporada`}</h5>\r\n                <p>{data.seasonCurrentPt.overview}</p>\r\n            </Link>\r\n            <div id=\"boxEpisodioAtual\"></div>\r\n            <div id=\"boxEpisodios\">\r\n                <select id=\"temporada\"\r\n                    value={data.seasonSelected}\r\n                    onChange={handleChange}>\r\n                    {\r\n                        data.seasons\r\n                        .map((_value)=>(\r\n                            <option\r\n                                value={_value}\r\n                                key={_value}\r\n                            >\r\n                                {`${_value}º Temporada`}\r\n                            </option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                <section id=\"episodios\">\r\n                    {\r\n                        data.width <= 600 ?\r\n                        <div  className = 'episodesList'>\r\n                            {\r\n                                seasonsFormated.\r\n                                filter(_episode => _episode.season == data.seasonSelected)\r\n                                .map((_value)=>(\r\n                                    <div key = {_value.name} className=\"episodioDiv\">\r\n                                        <Link to={{pathname:`${props.match.params.name}/${_value.season}x${_value.number}`}}\r\n                                            className={`episodio  ${isWatched(localStorage.history,_value.season,_value.number)?'isWatched':''}`}\r\n                                            style={{backgroundImage: `url(${_value.image.medium})`}}\r\n                                        >\r\n                                            {\r\n                                                isWatched(localStorage.history,_value.season,_value.number) ?\r\n                                                    <div\r\n                                                        className='episodeProgress'\r\n                                                        style={\r\n                                                            {\r\n                                                                width: `${progressBar(localStorage.history,_value.season,_value.number)}%`\r\n                                                            }\r\n                                                        }>\r\n                                                    </div>\r\n                                                :\r\n                                                <div></div>\r\n\r\n                                            }\r\n                                            {\r\n                                                isWatched(localStorage.history,_value.season,_value.number) ?\r\n                                                    <div\r\n                                                        className='asdasdasd'\r\n                                                        style={\r\n                                                            {\r\n                                                                width: `${progressBar(localStorage.history,_value.season,_value.number)}%`\r\n                                                            }\r\n                                                        }>\r\n                                                    </div>\r\n                                                :\r\n                                                <div></div>\r\n\r\n                                            }\r\n                                        </Link>\r\n                                        <h6>{`${_value.number}. ${_value.name}`}</h6>\r\n                                        <p>{transformSeasonsInLanguagePt(_value).overview}</p>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div> :\r\n                        <Carousel\r\n                            className = 'episodesCarrousel'\r\n                            itemsToShow={data.width <= 992 ? 3 : 4}\r\n                            pagination={false}\r\n                            itemPadding={data.width ? [5, 5]:[10, 10]}\r\n                            >\r\n                            {\r\n                                seasonsFormated.\r\n                                filter(_episode => _episode.season == data.seasonSelected)\r\n                                .map((_value)=>(\r\n                                    <div key = {_value.name} className=\"episodioDiv\">\r\n                                        <Link to={{pathname:`${props.match.params.name}/${_value.season}x${_value.number}`}}\r\n                                            className={`episodio  ${isWatched(localStorage.history,_value.season,_value.number)?'isWatched':''}`}\r\n                                            style={{backgroundImage: `url(${_value.image.medium})`}}\r\n                                        >\r\n                                            {\r\n                                                isWatched(localStorage.history,_value.season,_value.number) ?\r\n                                                <div\r\n                                                    className='episodeProgress'\r\n                                                    style={\r\n                                                        {\r\n                                                            width: `${progressBar(localStorage.history,_value.season,_value.number)}%`\r\n                                                        }\r\n                                                    }>\r\n                                                </div>\r\n                                                :\r\n                                                <div></div>\r\n\r\n                                            }\r\n                                        </Link>\r\n                                        <h6>{`${_value.number}. ${transformSeasonsInLanguagePt(_value).name}`}</h6>\r\n                                        <p>{transformSeasonsInLanguagePt(_value).overview}</p>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </Carousel>\r\n                    }\r\n\r\n                </section>\r\n            </div>\r\n        </main>\r\n      );\r\n    }else{\r\n      return(<div>asdasd</div>)\r\n    }\r\n  }\r\n  return(\r\n    <NotFound></NotFound>\r\n  );\r\n  \r\n}","import React, {useEffect,useState} from 'react';\r\nimport NotFound from '../404';\r\nimport { Link, Redirect, Route } from 'react-router-dom';\r\nimport ReactPlayer from 'react-player';\r\n\r\nexport default function Episodes(props){\r\n\r\n    const [data,setData] = useState({seeking:true,duration:0});\r\n    const [loading,setLoading] = useState(true);\r\n    const [error,setError] = useState(false);\r\n    const [player,setPlayer] = useState();\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        try {\r\n            getEpisode();\r\n        } catch (error) {\r\n            setError(true);\r\n        }finally{\r\n            setLoading(false);\r\n        }\r\n        \r\n      },[]);\r\n\r\n    function getEpisode(id = props.match.params.episode){\r\n        const _url = id;\r\n        const seasonsFormated = JSON.parse(sessionStorage.getItem('seasonsFormatedPt'));\r\n            const length = _url.length;\r\n            const episode = _url.substring(_url.indexOf('x')+1,length);\r\n            const season = _url.substring(0,_url.indexOf('x'));\r\n           if(episode && season){\r\n               var _data = data;\r\n                const _episode = seasonsFormated\r\n                    .filter(_ep => _ep.season_number == season)\r\n                    .find(_val => _val.episode_number == episode);\r\n                    if(_episode){\r\n                        const indexOf = seasonsFormated.indexOf(_episode);\r\n                        _data.episode = JSON.parse(sessionStorage.episodes).episodesDub[indexOf];\r\n                        _data.episodeComplete = _episode;\r\n                        _data.currentEp = episode;\r\n                        _data.currentSeason = season;\r\n                        _data.nextEpisodeAvaliable = seasonsFormated[indexOf+1] != null ? true : false;\r\n                        _data.prevsEpisodeAvaliable = seasonsFormated[indexOf-1] != null ? true : false;\r\n                        if(_data.nextEpisodeAvaliable){\r\n                            _data.nextEpisode = seasonsFormated[indexOf+1].season_number + 'x' + seasonsFormated[indexOf+1].episode_number;\r\n                        }\r\n                        if(_data.prevsEpisodeAvaliable){\r\n                            _data.prevEpisode = seasonsFormated[indexOf-1].season_number + 'x' + seasonsFormated[indexOf-1].episode_number;\r\n                        }\r\n                        if(!_data.seeking){\r\n                            saveInLocalStorage(season,episode,0,100)\r\n                        }\r\n                        setData({..._data});\r\n                    }else{\r\n                        throw 'error'\r\n                      }\r\n                    \r\n           }else{\r\n            throw 'error'\r\n          }\r\n    }\r\n\r\n    function saveInLocalStorage(season,episode,playedSeconds,duration){\r\n        localStorage.setItem('episode',episode);\r\n        localStorage.setItem('season',season);\r\n        let getHistory = {};\r\n        let _jsonParsse = {};\r\n        try {\r\n            _jsonParsse = JSON.parse(localStorage.history);\r\n            getHistory = _jsonParsse; \r\n        } catch(e) {\r\n            getHistory = {};\r\n        }\r\n        const serieName = props.match.params.name;\r\n        const _json = {[serieName]: {'episode': episode,'season':season,'time': playedSeconds,'duration':duration}};\r\n        if(!_jsonParsse[serieName]){\r\n            getHistory[Object.keys(_json)] = Object.values(_json);\r\n            localStorage.setItem('history', JSON.stringify(getHistory));\r\n        }else{\r\n            var _jsonSeason = _json[serieName].season;\r\n            var _jsonEpisode = _json[serieName].episode;\r\n            if(!(_jsonParsse[serieName].filter(_item => _item.season == _jsonSeason)\r\n                .find(_item => _item.episode == _jsonEpisode))){\r\n                getHistory[Object.keys(_json)] = Object.values(_json);\r\n            }else{\r\n                const _ep = _jsonParsse[serieName].filter(_item => _item.season == _jsonSeason)\r\n                .find(_item => _item.episode == _jsonEpisode);\r\n                const index = _jsonParsse[serieName].indexOf(_ep);\r\n                _ep.time = playedSeconds;\r\n                _ep.duration = duration;\r\n                _jsonParsse[serieName][index] = _ep;\r\n                getHistory = _jsonParsse;\r\n            }\r\n            localStorage.setItem('history', JSON.stringify(getHistory))\r\n        }\r\n    }\r\n\r\n    function handleDuration(duration){\r\n        var _data = data;\r\n        _data.duration = duration;\r\n       setData({..._data});\r\n\r\n    }\r\n\r\n    function isToseek(){\r\n        const {location} = props;\r\n        if(location.query != undefined && !location.query.isToseek){\r\n            return location.query.isToseek\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function handleProgress(_data){\r\n        console.log(_data.playedSeconds)\r\n        if(_data.playedSeconds == data.duration){\r\n            const _nextEp = data.nextEpisode;\r\n            if(_nextEp){\r\n                getEpisode(_nextEp)\r\n                props.history.push({pathname: `${_nextEp}`, query: {isToseek: false}})\r\n            }\r\n        }\r\n        if (!data.seeking) {\r\n            saveInLocalStorage(\r\n                data.currentSeason,\r\n                data.currentEp,\r\n                _data.playedSeconds,\r\n                data.duration\r\n            )\r\n        }\r\n    }\r\n    \r\n    function handleSeek(){\r\n        var _data = data;\r\n        if(isToseek()){\r\n            let _jsonParsse;\r\n            try {\r\n                _jsonParsse = JSON.parse(localStorage.history);\r\n                \r\n            } catch(e) {\r\n                _jsonParsse = [];\r\n            }\r\n            const _serieName = props.match.params.name;\r\n            if(_jsonParsse[_serieName]){\r\n                const _findHistory = _jsonParsse[_serieName].filter(_item => _item.season == _data.episodeComplete.season_number)\r\n                .find(_item => _item.episode == _data.episodeComplete.episode_number);\r\n                if(_findHistory){\r\n                    setData({seeking: false,..._data})\r\n                    if(!(_findHistory.duration - _findHistory.time <= 50)){\r\n                        player.seekTo(parseFloat(_findHistory.time))\r\n                    }\r\n                }else{\r\n                    setData({seeking: false,..._data})\r\n                }\r\n            }\r\n            \r\n        }else{\r\n            setData({seeking: false,..._data})\r\n        }\r\n        \r\n    }\r\n\r\n    const ref = _player => {\r\n        setPlayer(_player);\r\n    }\r\n\r\n    if(!error){\r\n        if(!loading){\r\n          return(\r\n            <div id='episodeByID'>\r\n                    <div id=\"episodeInfo\">\r\n                        <Link to={`/`}>\r\n                            <span className=\"material-icons\">\r\n                                arrow_back\r\n                            </span>\r\n                        </Link>\r\n                        <div>\r\n                            {<h2 id=\"episodeName\">\r\n                                {`${data.episodeComplete.episode_number}. ${data.episodeComplete.name}`}\r\n                            </h2>}\r\n                            {<p id=\"episodeSeason\">\r\n                                {`${data.episodeComplete.season_number}º Temporada`}\r\n                            </p>}\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"episodeContent\">\r\n                        <Link to={`${data.prevEpisode}`} onClick={()=>{\r\n                            getEpisode(data.prevEpisode)\r\n                        }} className={`${data.prevsEpisodeAvaliable ? '':'isDisable'} btn btnPrev`}>\r\n                            <span className=\"material-icons\">\r\n                                keyboard_arrow_left\r\n                            </span>\r\n                        </Link>\r\n                        <ReactPlayer\r\n                            ref={ref}\r\n                            playing\r\n                            className='videoPlayer'\r\n                            onStart = {handleSeek}\r\n                            controls={true}\r\n                            width='65%'\r\n                            height=\"450px\"  \r\n                            url={data.episode} \r\n                            onProgress={handleProgress}\r\n                            onDuration={handleDuration}\r\n                        />\r\n                        <Link to={`${data.nextEpisode}`} onClick={()=>{\r\n                            getEpisode(data.nextEpisode)\r\n                        }} className={`${data.nextEpisodeAvaliable ? '':'isDisable'} btn btnNext`}>\r\n                            <span className=\"material-icons\">\r\n                                keyboard_arrow_right\r\n                            </span>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n          );\r\n        }else{\r\n          return(<div>asdasd</div>)\r\n        }\r\n      }\r\n      return(\r\n        <NotFound></NotFound>\r\n      );\r\n\r\n}","import styled from 'styled-components';\r\n\r\nexport const FullSize = styled.main`\r\n    width:100%;\r\n    height: 100vh;\r\n`;\r\n\r\nexport const Main = styled.main`\r\n    width:100%;\r\n`;\r\n\r\nexport const SizedBox = styled.div`\r\n    width: ${props => `${props.width}`};\r\n    height: ${props => `${props.height}`};\r\n    color:white;\r\n`;\r\n\r\nexport const ModalInfo = styled(SizedBox)`\r\n    display:flex;\r\n    flex-direction:column;\r\n    padding: 2% 2%;\r\n    margin: 2% 0;\r\n    p{\r\n        color: #b5b5b5;\r\n    }\r\n    @media(max-width: 990px) {\r\n        padding: 2% 4%;\r\n        width:100%;\r\n    }\r\n    color:white;\r\n    width:60%;\r\n`;\r\n\r\nexport const ModalEpisodes = styled(ModalInfo)`\r\n    width:100%;\r\n    hr{\r\n        margin:2% 0;\r\n        border-top: 0.5px solid #b5b5b5;\r\n    }\r\n    a{\r\n        margin:2% 2%;\r\n        text-decoration:none;\r\n        color:white;\r\n        display:flex;\r\n        align-items:center;\r\n        flex-wrap: wrap;\r\n        div:nth-child(1){\r\n            width:20%;\r\n            position: relative;\r\n            display:flex;\r\n            img{\r\n                border-radius:5px;\r\n                width: 100%;\r\n                height:auto;\r\n            }\r\n            .episodeProgress{\r\n                top:95%;\r\n                position: absolute;\r\n            }\r\n        }\r\n        @media(max-width: 990px) {\r\n            div:nth-child(1){\r\n                width:40%;\r\n            }\r\n            p{\r\n                margin-top:2%;\r\n            }\r\n        }\r\n        h4{\r\n            width:50%;\r\n            margin-left:2%;\r\n            font-size: 0.9rem;\r\n        }\r\n        p{\r\n            color: #b5b5b5;\r\n            font-size: 0.85rem;\r\n        }\r\n        \r\n    }\r\n    @media(max-width: 990px) {\r\n        h2{\r\n            font-size:1.2rem;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const HeroImage = styled.div`\r\n    width:100%;\r\n    height: 95vh;\r\n    background-image: url(${props => `${props.image}`}); \r\n    background-position:top;\r\n    background-size:cover;\r\n    display:flex;\r\n    @media(max-width: 500px) {\r\n        height: 70vh;\r\n    }\r\n    a{\r\n        text-decoration:none;\r\n        color: white;\r\n        text-transform: uppercase;\r\n        align-items:center;\r\n        justify-content: center;\r\n        width:100%;\r\n        justify-content:center;\r\n        text-align:center;\r\n        flex-direction:column;\r\n        font-size:1.7rem;\r\n        height: 100%;\r\n        @media(max-width: 990px) {\r\n            font-size:1.4rem;\r\n        }\r\n        background-color: rgba(0,0,0,0.7);\r\n        display:flex;\r\n        div:not(.react-stars-wrapper-0578260352001738){\r\n            p{\r\n                width:auto;\r\n            }\r\n            .genres{\r\n                padding-right:1%;\r\n            }\r\n            display:flex;\r\n            width:100%;\r\n            align-items:center;\r\n            justify-content:center;\r\n            flex-wrap:wrap;\r\n        }\r\n        p{\r\n            width:50%;\r\n            font-size:0.9rem;\r\n            font-weight:bold;\r\n            display: -webkit-box;\r\n            -webkit-line-clamp: 3; /** número de linhas que você quer exibir */\r\n            -webkit-box-orient: vertical;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            text-align: left;\r\n            text-transform:capitalize;\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const BoxEpisodioAtual = styled.div`\r\n    background-image: linear-gradient(\r\n        to bottom,rgba(20,20,20,0) 0,rgba(20,20,20,.15) 29%,rgba(20,20,20,.35) 44%,rgba(20,20,20,.58) 50%,#141414 68%,#141414 100%);\r\n    width: 100%;\r\n    height: 21vh;\r\n    top: 75vh;\r\n    z-index: 8;\r\n    position: absolute;\r\n    opacity: 1;\r\n    background-color: transparent;\r\n    @media(max-width: 500px) {\r\n        top: 60vh;\r\n        height: 11vh;\r\n    }\r\n`;\r\n\r\nexport const ModalEpisodioAtual = styled(BoxEpisodioAtual)`\r\n    top: 46vh !important;\r\n    height: 15vh;\r\n    background-image: linear-gradient(\r\n        to bottom,rgba(0,0,0,0) 0,rgba(0,0,0,.15) 29%,rgba(0,0,0,.35) 44%,rgba(0,0,0,.58) 50%,#000 68%,#000 100%);\r\n`;\r\n\r\nexport const SeriesBox = styled.div`\r\n    top: 80vh;\r\n    @media(max-width: 500px) {\r\n        top: 67vh;\r\n    }\r\n    position: absolute;\r\n    z-index: 9;\r\n    width: 100%;\r\n    padding-left: 2%;\r\n    \r\n`;\r\n\r\nexport const LogoTitle = styled.h1`\r\n    top:2%;\r\n    left:2%;\r\n    position: absolute;\r\n    font-size: 30px;\r\n    color:red;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 1.3rem;\r\n    color:white;\r\n`;\r\n\r\nexport const Center = styled.div`\r\n    width:100%;\r\n    height:100%;\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n`;\r\n\r\nexport const Card = styled.div`\r\n    width: 100%;\r\n    height:30vh;\r\n    @media(max-width: 990px) {\r\n        height:23vh;\r\n    }\r\n    position:relative;\r\n    div{\r\n        font-size:1rem;\r\n        top:0;\r\n        height:100%;\r\n        display:flex;\r\n        align-items:center;\r\n        justify-content:center;\r\n        flex-direction:column;\r\n        width:100%;\r\n        border-radius: 5px;\r\n        background-color:rgba(0,0,0,0.5);\r\n        &:hover{\r\n            border:solid white;\r\n        }\r\n        position:absolute;\r\n        svg{\r\n            font-size:3rem;\r\n        }\r\n        h4{\r\n            position:absolute;\r\n            bottom:0;\r\n            font-weight:normal;\r\n        }\r\n    }\r\n    a{\r\n        img{\r\n            height: 100%;\r\n            width:auto;\r\n            border-radius: 5px;\r\n        }\r\n\r\n    }\r\n    &:hover{\r\n        img{\r\n            border:solid white;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ModalHero = styled.div`\r\n    width:100%;\r\n    height: 60vh;\r\n    background-image: url(${props => `${props.image}`}); \r\n    background-position:top;\r\n    border-radius: 5px;\r\n    background-size:cover;\r\n    display:flex;\r\n    button{\r\n        position: absolute;\r\n        display:flex;\r\n        align-items:center;\r\n        justify-content:center;\r\n        font-weight:bold;\r\n        border-radius: 5px;\r\n        padding:1% 2%;\r\n        background-color: white;//#d40808;\r\n        top:40vh;\r\n        left:5vh;\r\n        color: black;\r\n        height: 5.5vh;\r\n        svg{\r\n            margin-right:8%;\r\n        }\r\n        width: 18vh;\r\n        border:none;\r\n        outline:none;\r\n    }\r\n`;\r\n\r\nexport const ContainerStyles = styled.div`\r\n    position: absolute;\r\n    left:-3vh;\r\n    max-width: 25vh;\r\n    top:30vh;\r\n    height: 3px;\r\n    width: 100%;\r\n    background-color: #7d7d7d;\r\n    border-radius: 50px;\r\n    margin: 50px;\r\n`\r\n\r\nexport  const FillerStyless = styled.div`\r\n    height: 100%;\r\n    width: ${props => `${props.completed}%`};\r\n    background: red;\r\n`\r\nexport  const EpisodeProgress = styled.div`\r\n    position:absolute;\r\n    bottom:0;\r\n    height: 1px !important;\r\n    color: red;\r\n    border-top: 4px solid;\r\n    width: ${props => `${props.value}%`}\r\n`","import React, {forwardRef,useEffect,useState} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Modal } from 'react-responsive-modal';\r\nimport {ModalHero, ModalInfo, ModalEpisodes, ModalEpisodioAtual, SizedBox, Title, Center, EpisodeProgress} from '../style';\r\nimport NotFound from '../404';\r\nimport { Link } from 'react-router-dom';\r\nimport {MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport api from '../../api';\r\nimport axiosInstance from '../../axios';\r\nimport firebase from '../../firebase'\r\nimport 'react-responsive-modal/styles.css';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport PlayArrowOutlinedIcon from '@material-ui/icons/PlayArrowOutlined';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './styleModal.css';\r\nimport ProgressBar from './progressBar';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: '#b71c1c',\r\n      },\r\n      secondary: {\r\n        main: '#b71c1c',\r\n      },\r\n    },\r\n  });\r\n\r\nconst ModalSerie = ((\r\n    {\r\n        name,\r\n        open,\r\n        onCloseModal\r\n    },\r\n\r\n)=>{\r\n\r\n    const [data,setData] = useState({seasonSelected: 1});\r\n    const [loading,setLoading] = useState(true);\r\n    const [error,setError] = useState(false);\r\n\r\n    function handleData(_data){\r\n        setData({...data,..._data})\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setData({...data,seasonSelected: event.target.value});\r\n    }\r\n\r\n    function isWatched(episode,currentSeason,currentEpisode){\r\n        try {\r\n            const history = JSON.parse(episode)\r\n            return (history[name].filter(_item => _item.season == currentSeason)\r\n                .find(_item => _item.episode == currentEpisode));\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function progressBar(episode,currentSeason,currentEpisode){\r\n        const _epWatched = isWatched(episode,currentSeason,currentEpisode);\r\n        let _progess = 0\r\n        if(_epWatched){\r\n            _progess = _epWatched ? ((_epWatched.time*100) / _epWatched.duration) : 0\r\n        }\r\n\r\n        return _progess;\r\n    }\r\n\r\n    function transformSeasonsInLanguagePt(_episode){\r\n        return data.seasonsFormatedPt[data.seasonsFormated.indexOf(_episode)]\r\n    }\r\n\r\n    function hasHistory(_nameSerie){\r\n        try {\r\n            const history = JSON.parse(localStorage.history);\r\n           return history[_nameSerie][history[_nameSerie].length-1];\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let params = {\r\n        api_key: process.env.REACT_APP_API_KEY,\r\n        append_to_response: '',\r\n        language: 'pt-br'\r\n        }\r\n        const _result = async () => {\r\n        setLoading(true);\r\n        setError(true);\r\n        try {\r\n            const _serie = await firebase.getSeries(`${name}`);\r\n            const _episodes = await firebase.getEpisodes(`${name}`);\r\n            if(_serie != null && _serie.length != 0){\r\n                for (let index = 1; index <= _serie.seasons; index++) {\r\n                    params.append_to_response = `${params.append_to_response},season/${index}`;\r\n                }\r\n                const _rep = await axiosInstance.get(`${_serie.id}`,{params});\r\n                let seasonsFormatedPt = [];\r\n                for (let index = 1; index <= _serie.seasons; index++) {\r\n                    seasonsFormatedPt.push(..._rep.data[`season/${index}`].episodes)\r\n                }\r\n                const response = await api.get(`${_serie.idMaze}?embed=episodes`);\r\n            \r\n                let data = {};\r\n                let seasons = new Set(response.data._embedded.episodes.map(item => item.season))\r\n                let seasonsFormated = response.data._embedded.episodes;\r\n                data.seasonsFormatedPt = seasonsFormatedPt;\r\n                data.seasonsFormated = seasonsFormated;\r\n                data.seasons = Array.from(seasons);\r\n                const _hasHistory = hasHistory(name);\r\n                if(_hasHistory){\r\n                    data.seasonCurrent = seasonsFormated\r\n                        .filter(_episode => _episode.season == _hasHistory.season)\r\n                        .find((_item)=>_item.number == _hasHistory.episode)\r\n                    data.seasonCurrentPt = seasonsFormatedPt\r\n                    .filter(_episode => _episode.season_number == _hasHistory.season)\r\n                    .find((_item)=>_item.episode_number == _hasHistory.episode);\r\n                }else{\r\n                    data.seasonCurrent = seasonsFormated[0]\r\n                    data.seasonCurrentPt = seasonsFormatedPt[0]\r\n                }\r\n                \r\n                sessionStorage.episodes = JSON.stringify(_episodes);\r\n                sessionStorage.setItem(\r\n                    'seasonsFormatedPt',\r\n                    JSON.stringify(seasonsFormatedPt)\r\n                )\r\n                data.seasonCurrent.summary = data.seasonCurrent.summary.replace('<p>','').replace('</p>','');\r\n                handleData(data);\r\n                setError(false);\r\n            }else{\r\n                throw 'error'\r\n            }\r\n        } catch (error) {\r\n            setError(true);\r\n        }finally{\r\n            setLoading(false)\r\n        }\r\n        \r\n        }\r\n        _result();\r\n    },[name]);\r\n\r\n    if(!loading){\r\n        if(!error){\r\n          const {seasonsFormated} = data;\r\n          return(\r\n            <Modal \r\n                open={open} \r\n                onClose={onCloseModal} \r\n                closeOnEsc={true}\r\n                classNames={{\r\n                    modal: 'customModal',\r\n                }}\r\n                >\r\n                <ModalHero image={data.seasonCurrent.image.original}>\r\n                    {\r\n                        isWatched(localStorage.history,data.seasonCurrent.season,data.seasonCurrent.number) ?\r\n                            <ProgressBar completed= {progressBar(localStorage.history,data.seasonCurrent.season,data.seasonCurrent.number)} />\r\n                        :\r\n                        <div></div>\r\n\r\n                    }\r\n                    <button>\r\n                        <PlayArrowOutlinedIcon fontSize=\"default\" />\r\n                        Assistir\r\n                    </button>\r\n                </ModalHero>\r\n                <ModalEpisodioAtual></ModalEpisodioAtual>\r\n                <ModalInfo>\r\n                    <h3>{`T${data.seasonCurrent.season} E${data.seasonCurrent.number}. ${data.seasonCurrentPt.name}`}</h3>\r\n                    <p>{data.seasonCurrentPt.overview}</p>\r\n                </ModalInfo>\r\n                <ModalEpisodes>\r\n                    <h2>Episodios</h2>\r\n                    <hr></hr>\r\n                    {\r\n                        seasonsFormated.\r\n                        filter(_episode => _episode.season == data.seasonSelected)\r\n                        .map((_value)=>(\r\n                            <Link key={Math.random()} to={{pathname:`${name}/${_value.season}x${_value.number}`}}\r\n                                className={`${isWatched(localStorage.history,_value.season,_value.number)?'isWatched':''}`}\r\n                            >\r\n                                <div>\r\n                                    <img src={_value.image.medium} />\r\n                                    {\r\n                                        isWatched(localStorage.history,_value.season,_value.number) ?\r\n                                            <EpisodeProgress value={progressBar(localStorage.history,_value.season,_value.number)} />\r\n                                        :\r\n                                        <div></div>\r\n\r\n                                    }\r\n                                </div>\r\n                                <h4>{`${_value.number}. ${transformSeasonsInLanguagePt(_value).name}`}</h4>\r\n                                <p>{transformSeasonsInLanguagePt(_value).overview}</p>\r\n                            </Link>\r\n                        ))\r\n                    }\r\n                </ModalEpisodes>\r\n            </Modal>\r\n        );\r\n        }else{\r\n            return(\r\n                <Modal \r\n                    open={open} \r\n                    onClose={onCloseModal} \r\n                    closeOnEsc={true}\r\n                    classNames={{\r\n                        modal: 'customModal',\r\n                    }}\r\n                >\r\n                    <NotFound></NotFound>\r\n                </Modal>\r\n            )\r\n          }\r\n    }\r\n    return(\r\n        <Modal \r\n            open={open} \r\n            onClose={onCloseModal} \r\n            closeOnEsc={true}\r\n            classNames={{\r\n                modal: 'customModal',\r\n            }}\r\n        >\r\n            <SizedBox height='100vh'>\r\n                <Center>\r\n                    <Title>Carregando</Title>\r\n                </Center>\r\n            </SizedBox>\r\n        </Modal>\r\n    );\r\n    \r\n\r\n})\r\n\r\nModalSerie.propTypes = {\r\n    onCloseModal: PropTypes.func,\r\n};\r\nexport default ModalSerie;","import React, {useEffect,useState,useRef} from 'react';\r\nimport firebase from '../../firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport {Card, Title} from '../style';\r\nimport {LogoTitle} from '../style';\r\nimport {HeroImage} from '../style';\r\nimport {SeriesBox} from '../style';\r\nimport {SizedBox} from '../style';\r\nimport {Main} from '../style';\r\nimport axiosInstance from '../../axios';\r\nimport {BoxEpisodioAtual} from '../style';\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport ReactStars from \"react-rating-stars-component\";\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport PlayArrowOutlinedIcon from '@material-ui/icons/PlayArrowOutlined';\r\nimport PlayCircleFilledWhiteOutlinedIcon from '@material-ui/icons/PlayCircleFilledWhiteOutlined';\r\nimport {MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport  ModalSerie from './modal';\r\nimport 'react-responsive-modal/styles.css';\r\n\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: '#b71c1c',\r\n      },\r\n      secondary: {\r\n        main: '#b71c1c',\r\n      },\r\n    },\r\n  });\r\n\r\n  function useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    });\r\n  \r\n    useEffect(() => {\r\n      function handleResize() {\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      \r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      \r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      \r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n  \r\n    return windowSize;\r\n  }\r\n\r\nexport default function Homepage(){\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [modalSerie, setModalSerie] = useState('');\r\n    const onOpenModal = () => setOpen(true);\r\n\r\n    const size = useWindowSize();\r\n    const [data,setData] = useState({seasonSelected: 1});\r\n    const [loading,setLoading] = useState(true);\r\n    const [error,setError] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        const _result = async () => {\r\n            setLoading(true);\r\n            try {\r\n                let params = {\r\n                    api_key: process.env.REACT_APP_API_KEY,\r\n                    language: 'pt-br'\r\n                }\r\n                var _data = data;\r\n                const allSeries = await firebase.getAllSeries();\r\n                const randomSerie = allSeries[Math.floor(Math.random() * allSeries.length)];\r\n                \r\n                const response = await axiosInstance.get(`${randomSerie.id}`,{params});\r\n                _data.history = getHistory();\r\n                _data.allSeries = allSeries;\r\n                _data.randomSerie = randomSerie;\r\n                _data.randomSerieComplete = response.data;\r\n                setData(_data);\r\n            } catch (error) {\r\n                setError(true);\r\n            }finally{\r\n                setLoading(false);\r\n            }\r\n           \r\n        }\r\n        _result()\r\n    },[])\r\n\r\n    function getHistory(){\r\n        try {\r\n            const history = JSON.parse(localStorage.history)\r\n           return history;\r\n        } catch (error) {\r\n            return {};\r\n        }\r\n    }\r\n\r\n    function hasHistory(_nameSerie){\r\n        try {\r\n            const history = data.history;\r\n           return history[_nameSerie][history[_nameSerie].length-1];\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n    }\r\n\r\n    if(!error){\r\n        if(!loading){\r\n            return (\r\n                <Main>\r\n                    \r\n                    <LogoTitle>Moviee</LogoTitle>\r\n                    <HeroImage image={data.randomSerie.image.banner}>\r\n                        <Link to='' onClick={()=>{\r\n                                    setModalSerie(data.randomSerie.name);\r\n                                    onOpenModal()\r\n                                }}>\r\n                            <h1>{`${data.randomSerie.name.replaceAll('_',' ')}`}</h1>\r\n                            <div>\r\n                                {\r\n                                    data.randomSerieComplete.genres.map(_item=>(\r\n                                    <p key={Math.random()} className='genres'>{_item.name}</p>   \r\n                                    ))  \r\n                                }\r\n                            </div>\r\n                            <ReactStars\r\n                                count={5}\r\n                                value={5/10 * data.randomSerieComplete.vote_average}\r\n                                edit={false}\r\n                                size={24}\r\n                                isHalf={true}\r\n                                activeColor=\"red\"\r\n                            />\r\n                            <p>\r\n                                {data.randomSerieComplete.overview}\r\n                            </p>\r\n                            <MuiThemeProvider theme={theme}>\r\n                                <Grid item >\r\n                                    <SizedBox width='100%' height='7px'/>\r\n                                    <ButtonGroup disableElevation variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                                        <Button onClick={()=>{\r\n                                            setModalSerie(data.randomSerie.name);\r\n                                            onOpenModal()\r\n                                        }}>\r\n                                            <PlayArrowOutlinedIcon fontSize=\"default\" />\r\n                                            Assistir\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Grid>\r\n                            </MuiThemeProvider>\r\n                        </Link>\r\n                    </HeroImage>\r\n                    <BoxEpisodioAtual />\r\n                    <SeriesBox>\r\n                        <Title>Todas as séries</Title>\r\n                        <SizedBox width='100%' height='10px'/>\r\n                        <Swiper\r\n                           slidesPerView='auto'\r\n                           navigation\r\n                            >\r\n                            {\r\n                                data.allSeries\r\n                                .map((_value)=>(\r\n                                    <SwiperSlide key = {Math.random()} >\r\n                                        <Card image={_value.image} onClick={()=>{\r\n                                                setModalSerie(_value.name);\r\n                                                onOpenModal()\r\n                                            }}>\r\n                                            <Link to='' >\r\n                                                <img src={_value.image.original}></img>\r\n                                            </Link>\r\n                                            {hasHistory(_value.name) ? \r\n                                            <div>\r\n                                                <PlayCircleFilledWhiteOutlinedIcon/>\r\n                                                <h4>{`T${hasHistory(_value.name).season} E${hasHistory(_value.name).episode}`}</h4>\r\n                                            </div> : <></>}\r\n                                        </Card>\r\n                                    </SwiperSlide>\r\n                                ))\r\n                                }\r\n                            </Swiper>\r\n                        <SizedBox width='100%' height='10px'/>\r\n                    </SeriesBox>\r\n                    \r\n                </Main>\r\n            );\r\n        }\r\n        return <h1>a</h1>\r\n    }\r\n    return <h1>a</h1>\r\n}","import React, { forwardRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\r\nimport FastRewindIcon from \"@material-ui/icons/FastRewind\";\r\nimport FastForwardIcon from \"@material-ui/icons/FastForward\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\r\nimport VolumeDown from \"@material-ui/icons/VolumeDown\";\r\nimport VolumeMute from \"@material-ui/icons/VolumeOff\";\r\nimport FullScreen from \"@material-ui/icons/Fullscreen\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  controlsWrapper: {\r\n    visibility: \"hidden\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    height: \"100%\",\r\n    background: \"rgba(0,0,0,0.6)\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  controlIcons: {\r\n    color: \"#777\",\r\n\r\n    fontSize: 50,\r\n    transform: \"scale(0.9)\",\r\n    \"&:hover\": {\r\n      color: \"#fff\",\r\n      transform: \"scale(1)\",\r\n    },\r\n  },\r\n\r\n  bottomIcons: {\r\n    color: \"#999\",\r\n    \"&:hover\": {\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  volumeSlider: {\r\n    width: 100,\r\n  },\r\n}));\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    height: 8,\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid currentColor\",\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    \"&:focus, &:hover, &$active\": {\r\n      boxShadow: \"inherit\",\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: \"calc(-50% + 4px)\",\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider);\r\n\r\nfunction ValueLabelComponent(props) {\r\n  const { children, open, value} = props;\r\n\r\n  return (\r\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n      {children}\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nconst Controls = forwardRef((\r\n    {\r\n      episode,\r\n      onSeek,\r\n      onSeekMouseDown,\r\n      onSeekMouseUp,\r\n      onDuration,\r\n      onRewind,\r\n      onPlayPause,\r\n      onFastForward,\r\n      playing,\r\n      played,\r\n      elapsedTime,\r\n      totalDuration,\r\n      onMute,\r\n      muted,\r\n      onVolumeSeekDown,\r\n      onChangeDispayFormat,\r\n      playbackRate,\r\n      nextEp,\r\n      prevEp,\r\n      onPlaybackRateChange,\r\n      onToggleFullScreen,\r\n      volume,\r\n      onVolumeChange,\r\n    },\r\n    ref\r\n  ) => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n\r\n    function onClickBack(){\r\n      window.location = '/teste';\r\n    }\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? \"simple-popover\" : undefined;\r\n\r\n    return (\r\n      <div ref={ref} className={classes.controlsWrapper}>\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"space-between\"\r\n          style={{ flexGrow: 1 }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            style\r\n            style={{ padding: 16 }}\r\n          >\r\n            <Grid container direction=\"row\" alignItems=\"center\">\r\n              <IconButton\r\n                onClick={onClickBack}\r\n                className={classes.controlIcons}\r\n                aria-label=\"play\"\r\n              >\r\n                <KeyboardArrowLeftIcon fontSize=\"inherit\" />\r\n              </IconButton>\r\n              <Grid direction='column'>\r\n                <Typography variant=\"h5\" style={{ color: \"#fff\" }}>\r\n                  {episode.name}\r\n                </Typography>\r\n                <Typography variant=\"h9\" style={{ color: \"#fff\" }}>\r\n                  {`${episode.season_number}º Temporada`}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\r\n            <IconButton\r\n              onClick={onRewind}\r\n              className={classes.controlIcons}\r\n              aria-label=\"rewind\"\r\n            >\r\n              <FastRewindIcon\r\n                className={classes.controlIcons}\r\n                fontSize=\"inherit\"\r\n              />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={onPlayPause}\r\n              className={classes.controlIcons}\r\n              aria-label=\"play\"\r\n            >\r\n              {playing ? (\r\n                <PauseIcon fontSize=\"inherit\" />\r\n              ) : (\r\n                <PlayArrowIcon fontSize=\"inherit\" />\r\n              )}\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={onFastForward}\r\n              className={classes.controlIcons}\r\n              aria-label=\"forward\"\r\n            >\r\n              <FastForwardIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n            style={{ padding: 16 }}\r\n          >\r\n            <Grid item xs={12}>\r\n              <PrettoSlider\r\n                min={0}\r\n                max={100}\r\n                ValueLabelComponent={(props) => (\r\n                  <ValueLabelComponent {...props} value={elapsedTime} />\r\n                )}\r\n                aria-label=\"custom thumb label\"\r\n                value={played * 100}\r\n                onChange={onSeek}\r\n                onMouseDown={onSeekMouseDown}\r\n                onChangeCommitted={onSeekMouseUp}\r\n                onDuration={onDuration}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={10}>\r\n              <Grid container alignItems=\"center\">\r\n                <IconButton\r\n                  onClick={onPlayPause}\r\n                  className={classes.bottomIcons}\r\n                >\r\n                  {playing ? (\r\n                    <PauseIcon fontSize=\"large\" />\r\n                  ) : (\r\n                    <PlayArrowIcon fontSize=\"large\" />\r\n                  )}\r\n                </IconButton>\r\n\r\n                <IconButton\r\n                  // onClick={() => setState({ ...state, muted: !state.muted })}\r\n                  onClick={onMute}\r\n                  className={`${classes.bottomIcons} ${classes.volumeButton}`}\r\n                >\r\n                  {muted ? (\r\n                    <VolumeMute fontSize=\"large\" />\r\n                  ) : volume > 0.5 ? (\r\n                    <VolumeUp fontSize=\"large\" />\r\n                  ) : (\r\n                    <VolumeDown fontSize=\"large\" />\r\n                  )}\r\n                </IconButton>\r\n\r\n                <Slider\r\n                  min={0}\r\n                  max={100}\r\n                  value={muted ? 0 : volume * 100}\r\n                  onChange={onVolumeChange}\r\n                  aria-labelledby=\"input-slider\"\r\n                  className={classes.volumeSlider}\r\n                  onMouseDown={onSeekMouseDown}\r\n                  onChangeCommitted={onVolumeSeekDown}\r\n                />\r\n                <Button\r\n                  variant=\"text\"\r\n                  onClick={\r\n                    onChangeDispayFormat\r\n                  }\r\n                >\r\n                  <Typography\r\n                    variant=\"body1\"\r\n                    style={{ color: \"#fff\", marginLeft: 16 }}\r\n                  >\r\n                    {elapsedTime}/{totalDuration}\r\n                  </Typography>\r\n                </Button>\r\n                <Grid >\r\n                  <IconButton\r\n                    onClick={prevEp}\r\n                    className={classes.bottomIcons}\r\n                    variant=\"text\"\r\n                  > \r\n                    <KeyboardArrowLeftIcon fontSize=\"large\" />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid >\r\n                  <IconButton\r\n                    onClick={nextEp}\r\n                    className={classes.bottomIcons}\r\n                    variant=\"text\"\r\n                  > \r\n                    <KeyboardArrowRightIcon fontSize=\"large\" />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <Button\r\n                onClick={handleClick}\r\n                aria-describedby={id}\r\n                className={classes.bottomIcons}\r\n                variant=\"text\"\r\n              >\r\n                <Typography>{playbackRate}X</Typography>\r\n              </Button>\r\n              <Popover\r\n                container={ref.current}\r\n                open={open}\r\n                id={id}\r\n                onClose={handleClose}\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"bottom\",\r\n                  horizontal: \"left\",\r\n                }}\r\n              >\r\n                <Grid container direction=\"column-reverse\">\r\n                  {[0.5, 1, 1.5, 2].map((rate) => (\r\n                    <Button\r\n                      key={rate}\r\n                      //   onClick={() => setState({ ...state, playbackRate: rate })}\r\n                      onClick={() => onPlaybackRateChange(rate)}\r\n                      variant=\"text\"\r\n                    >\r\n                      <Typography\r\n                        color={rate === playbackRate ? \"secondary\" : \"inherit\"}\r\n                      >\r\n                        {rate}X\r\n                      </Typography>\r\n                    </Button>\r\n                  ))}\r\n                </Grid>\r\n                \r\n              </Popover>\r\n              <IconButton\r\n                onClick={onToggleFullScreen}\r\n                className={classes.bottomIcons}\r\n              >\r\n                <FullScreen fontSize=\"large\" />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nControls.propTypes = {\r\n  onSeek: PropTypes.func,\r\n  onSeekMouseDown: PropTypes.func,\r\n  onSeekMouseUp: PropTypes.func,\r\n  onDuration: PropTypes.func,\r\n  onRewind: PropTypes.func,\r\n  onPlayPause: PropTypes.func,\r\n  onFastForward: PropTypes.func,\r\n  onVolumeSeekDown: PropTypes.func,\r\n  nextEp: PropTypes.func,\r\n  prevEp: PropTypes.func,\r\n  onChangeDispayFormat: PropTypes.func,\r\n  onPlaybackRateChange: PropTypes.func,\r\n  onToggleFullScreen: PropTypes.func,\r\n  onMute: PropTypes.func,\r\n  playing: PropTypes.bool,\r\n  played: PropTypes.number,\r\n  elapsedTime: PropTypes.string,\r\n  totalDuration: PropTypes.string,\r\n  muted: PropTypes.bool,\r\n  playbackRate: PropTypes.number,\r\n};\r\nexport default Controls;","import React, { useState, useEffect,useRef} from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { makeStyles, MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport {FullSize} from '../style';\r\nimport screenful from \"screenfull\";\r\nimport NotFound from '../404';\r\nimport Controls from \"../episodes/controls\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#b71c1c',\r\n    },\r\n    secondary: {\r\n      main: '#b71c1c',\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  playerWrapper: {\r\n    width: \"100%\",\r\n    height:'100%',\r\n    position: \"relative\",\r\n    backgroundColor:'#000'\r\n  },\r\n  controlsWrapper: {\r\n    visibility: \"hidden\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    background: \"rgba(0,0,0,0.4)\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  topControls: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  middleControls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  bottomWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  bottomControls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  controlIcons: {\r\n    color: \"#777\",\r\n    fontSize: 50,\r\n    transform: \"scale(0.9)\",\r\n    \"&:hover\": {\r\n      color: \"#fff\",\r\n      transform: \"scale(1)\",\r\n    },\r\n  },\r\n  bottomIcons: {\r\n    color: \"#999\",\r\n    \"&:hover\": {\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n  volumeSlider: {\r\n    width: 100,\r\n  },\r\n}));\r\n\r\nconst format = (seconds) => {\r\n  if (isNaN(seconds)) {\r\n    return `00:00`;\r\n  }\r\n  const date = new Date(seconds * 1000);\r\n  const hh = date.getUTCHours();\r\n  const mm = date.getUTCMinutes();\r\n  const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\r\n  if (hh) {\r\n    return `${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\r\n  }\r\n  return `${mm}:${ss}`;\r\n};\r\n\r\nlet count = 0;\r\n\r\nfunction Videoplayer(props) {\r\n\r\n  const [loading,setLoading] = useState(true);\r\n  const [error,setError] = useState(false);\r\n  const classes = useStyles();\r\n  const [showControls, setShowControls] = useState(false);\r\n  // const [count, setCount] = useState(0);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [timeDisplayFormat, setTimeDisplayFormat] = React.useState(\"normal\");\r\n  const [bookmarks, setBookmarks] = useState([]);\r\n  const [state, setData] = useState({\r\n    pip: false,\r\n    playing: true,\r\n    controls: false,\r\n    light: false,\r\n    muted: false,\r\n    played: 0,\r\n    duration: 0,\r\n    playbackRate: 1.0,\r\n    volume: 0.5,\r\n    loop: false,\r\n    seeking: true,\r\n  });\r\n\r\n  const playerRef = useRef(null);\r\n  const playerContainerRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const {\r\n    playing,\r\n    controls,\r\n    light,\r\n\r\n    muted,\r\n    loop,\r\n    playbackRate,\r\n    pip,\r\n    played,\r\n    seeking,\r\n    volume,\r\n  } = state;\r\n\r\n  useEffect(()=>{\r\n    setLoading(true);\r\n    try {\r\n        getEpisode();\r\n    } catch (error) {\r\n        setError(true);\r\n    }finally{\r\n        setLoading(false);\r\n    }\r\n    \r\n  },[]);\r\n\r\n  function getEpisode(id = props.match.params.episode){\r\n    const _url = id;\r\n    const seasonsFormated = JSON.parse(sessionStorage.getItem('seasonsFormatedPt'));\r\n        const length = _url.length;\r\n        const episode = _url.substring(_url.indexOf('x')+1,length);\r\n        const season = _url.substring(0,_url.indexOf('x'));\r\n       if(episode && season){\r\n           var _data = state;\r\n            const _episode = seasonsFormated\r\n                .filter(_ep => _ep.season_number == season)\r\n                .find(_val => _val.episode_number == episode);\r\n                if(_episode){\r\n                    const indexOf = seasonsFormated.indexOf(_episode);\r\n                    _data.episode = JSON.parse(sessionStorage.episodes).episodesDub[indexOf];\r\n                    _data.episodeComplete = _episode;\r\n                    _data.currentEp = episode;\r\n                    _data.currentSeason = season;\r\n                    state.nextEpisodeAvaliable = seasonsFormated[indexOf+1] != null ? true : false;\r\n                    state.prevsEpisodeAvaliable = seasonsFormated[indexOf-1] != null ? true : false;\r\n                    if(state.nextEpisodeAvaliable){\r\n                        state.nextEpisode = seasonsFormated[indexOf+1].season_number + 'x' + seasonsFormated[indexOf+1].episode_number;\r\n                    }\r\n                    if(state.prevsEpisodeAvaliable){\r\n                        state.prevEpisode = seasonsFormated[indexOf-1].season_number + 'x' + seasonsFormated[indexOf-1].episode_number;\r\n                    }\r\n                    if(!_data.seeking){\r\n                        saveInLocalStorage(season,episode,0,100)\r\n                    }\r\n                    setData({..._data});\r\n                }else{\r\n                    throw 'error'\r\n                  }\r\n                \r\n       }else{\r\n        throw 'error'\r\n      }\r\n  }\r\n  function saveInLocalStorage(season,episode,playedSeconds,duration){\r\n    localStorage.setItem('episode',episode);\r\n    localStorage.setItem('season',season);\r\n    let getHistory = {};\r\n    let _jsonParsse = {};\r\n    try {\r\n        _jsonParsse = JSON.parse(localStorage.history);\r\n        getHistory = _jsonParsse; \r\n    } catch(e) {\r\n        getHistory = {};\r\n    }\r\n    const serieName = props.match.params.name;\r\n    const _json = {[serieName]: {'episode': episode,'season':season,'time': playedSeconds,'duration':duration}};\r\n    if(!_jsonParsse[serieName]){\r\n        getHistory[Object.keys(_json)] = Object.values(_json);\r\n        localStorage.setItem('history', JSON.stringify(getHistory));\r\n    }else{\r\n        var _jsonSeason = _json[serieName].season;\r\n        var _jsonEpisode = _json[serieName].episode;\r\n        if(!(_jsonParsse[serieName].filter(_item => _item.season == _jsonSeason)\r\n            .find(_item => _item.episode == _jsonEpisode))){\r\n          getHistory[Object.keys(_json)] =[...getHistory[Object.keys(_json)],...Object.values(_json)];\r\n        }else{\r\n          const _ep = _jsonParsse[serieName].filter(_item => _item.season == _jsonSeason)\r\n            .find(_item => _item.episode == _jsonEpisode);\r\n            const index = _jsonParsse[serieName].indexOf(_ep);\r\n            _ep.time = playedSeconds;\r\n            _ep.duration = duration;\r\n            _jsonParsse[serieName][index] = _ep;\r\n            getHistory = _jsonParsse;\r\n        }\r\n        localStorage.setItem('history', JSON.stringify(getHistory))\r\n    }\r\n  }\r\n  function handleSeek(){\r\n      var _data = state;\r\n      if(isToseek()){\r\n          let _jsonParsse;\r\n          try {\r\n              _jsonParsse = JSON.parse(localStorage.history);\r\n              \r\n          } catch(e) {\r\n              _jsonParsse = [];\r\n          }\r\n          const _serieName = props.match.params.name;\r\n          if(_jsonParsse[_serieName]){\r\n              const _findHistory = _jsonParsse[_serieName].filter(_item => _item.season == _data.episodeComplete.season_number)\r\n              .find(_item => _item.episode == _data.episodeComplete.episode_number);\r\n              if(_findHistory){\r\n                  if(!(_findHistory.duration - _findHistory.time <= 50)){\r\n                    const _time = _findHistory.time / (state.duration / 100 );\r\n                    handleSeekMouseUp('',_time)\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      _data.seeking = false;\r\n      setData({..._data})\r\n  }\r\n  function isToseek(){\r\n      const {location} = props;\r\n      if(location.query != undefined && !location.query.isToseek){\r\n          return location.query.isToseek\r\n      }\r\n      return true;\r\n  }\r\n  const handlePlayPause = () => {\r\n    setData({ ...state, playing: !state.playing });\r\n  };\r\n  const handleRewind = () => {\r\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() - 10);\r\n  };\r\n  const handleFastForward = () => {\r\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() + 10);\r\n  };\r\n  const handleProgress = (changeState) => {\r\n    const _state = state;\r\n    if (count > 3) {\r\n      controlsRef.current.style.visibility = \"hidden\";\r\n      count = 0;\r\n    }\r\n    if (controlsRef.current.style.visibility == \"visible\") {\r\n      count += 1;\r\n    }\r\n    if (!state.seeking) {\r\n      setData({ ..._state, ...changeState });\r\n    }\r\n    if(changeState.playedSeconds == state.duration){\r\n      const _nextEp = state.nextEpisode;\r\n      if(_nextEp){\r\n          getEpisode(_nextEp)\r\n          props.history.push({pathname: `${_nextEp}`, query: {isToseek: false}})\r\n      }\r\n    }\r\n    if (!state.seeking) {\r\n        saveInLocalStorage(\r\n           state.currentSeason,\r\n           state.currentEp,\r\n           changeState.playedSeconds,\r\n           state.duration\r\n        )\r\n   }\r\n\r\n  };\r\n  const handleSeekChange = (e, newValue) => {\r\n    setData({ ...state, played: parseFloat(newValue / 100) });\r\n  };\r\n  const handleSeekMouseDown = (e) => {\r\n    setData({ ...state, seeking: true });\r\n  };\r\n  const handleSeekMouseUp = (e, newValue) => {\r\n    setData({ ...state, seeking: false });\r\n    playerRef.current.seekTo(newValue / 100, \"fraction\");\r\n  };\r\n\r\n  const handleDuration = (duration) => {\r\n    setData({ ...state, duration });\r\n  };\r\n\r\n  const handleVolumeSeekDown = (e, newValue) => {\r\n    setData({ ...state, seeking: false, volume: parseFloat(newValue / 100) });\r\n  };\r\n  const handleVolumeChange = (e, newValue) => {\r\n    setData({\r\n      ...state,\r\n      volume: parseFloat(newValue / 100),\r\n      muted: newValue === 0 ? true : false,\r\n    });\r\n  };\r\n\r\n  const toggleFullScreen = () => {\r\n    screenful.toggle(playerContainerRef.current);\r\n  };\r\n\r\n  const handleMouseMove = () => {\r\n    controlsRef.current.style.visibility = \"visible\";\r\n    count = 0;\r\n  };\r\n\r\n  const hanldeMouseLeave = () => {\r\n    controlsRef.current.style.visibility = \"hidden\";\r\n    count = 0;\r\n  };\r\n\r\n  const nextEp = () => {\r\n    const _nextEp = state.nextEpisode;\r\n    getEpisode(_nextEp);\r\n    props.history.push({pathname: `${_nextEp}`, query: {isToseek: false}});\r\n  };\r\n  const prevEp = () => {\r\n    const _prevEp = state.prevEpisode;\r\n    getEpisode(_prevEp);\r\n    props.history.push({pathname: `${state.prevEpisode}`, query: {isToseek: false}});\r\n  };\r\n\r\n  const handleDisplayFormat = () => {\r\n    setTimeDisplayFormat(\r\n      timeDisplayFormat == \"normal\" ? \"remaining\" : \"normal\"\r\n    );\r\n  };\r\n\r\n  const handlePlaybackRate = (rate) => {\r\n    setData({ ...state, playbackRate: rate });\r\n  };\r\n\r\n  const hanldeMute = () => {\r\n    setData({ ...state, muted: !state.muted });\r\n  };\r\n\r\n  const currentTime =\r\n    playerRef && playerRef.current\r\n      ? playerRef.current.getCurrentTime()\r\n      : \"00:00\";\r\n\r\n  const duration =\r\n    playerRef && playerRef.current ? playerRef.current.getDuration() : \"00:00\";\r\n  const elapsedTime =\r\n    timeDisplayFormat == \"normal\"\r\n      ? format(currentTime)\r\n      : `-${format(duration - currentTime)}`;\r\n\r\n  const totalDuration = format(duration);\r\n\r\n  if(!error){\r\n    if(!loading){\r\n      return (\r\n        <MuiThemeProvider theme={theme}>\r\n          <FullSize>\r\n            <div\r\n                onMouseMove={handleMouseMove}\r\n                onMouseLeave={hanldeMouseLeave}\r\n                ref={playerContainerRef}\r\n                className={classes.playerWrapper}\r\n              >\r\n                <ReactPlayer\r\n                  ref={playerRef}\r\n                  width=\"100%\"\r\n                  height='100%'\r\n                  url={state.episode} \r\n                  pip={pip}\r\n                  onStart={handleSeek}\r\n                  playing={playing}\r\n                  controls={false}\r\n                  light={light}\r\n                  loop={loop}\r\n                  playbackRate={playbackRate}\r\n                  volume={volume}\r\n                  onDuration={handleDuration}\r\n                  onProgress={handleProgress}\r\n                />\r\n                <Controls\r\n                  episode={state.episodeComplete}\r\n                  ref={controlsRef}\r\n                  onSeek={handleSeekChange}\r\n                  onSeekMouseDown={handleSeekMouseDown}\r\n                  onSeekMouseUp={handleSeekMouseUp}\r\n                  onDuration={handleDuration}\r\n                  onRewind={handleRewind}\r\n                  onPlayPause={handlePlayPause}\r\n                  onFastForward={handleFastForward}\r\n                  playing={playing}\r\n                  played={played}\r\n                  elapsedTime={elapsedTime}\r\n                  totalDuration={totalDuration}\r\n                  onMute={hanldeMute}\r\n                  nextEp={nextEp}\r\n                  prevEp={prevEp}\r\n                  muted={muted}\r\n                  onVolumeChange={handleVolumeChange}\r\n                  onVolumeSeekDown={handleVolumeSeekDown}\r\n                  onChangeDispayFormat={handleDisplayFormat}\r\n                  playbackRate={playbackRate}\r\n                  onPlaybackRateChange={handlePlaybackRate}\r\n                  onToggleFullScreen={toggleFullScreen}\r\n                  volume={volume}\r\n                />\r\n              </div>\r\n          </FullSize>\r\n      \r\n        </MuiThemeProvider>\r\n      );\r\n    }else{\r\n      return(<div>asdasd</div>)\r\n    }\r\n  } return(\r\n    <NotFound></NotFound>\r\n  );\r\n  \r\n}\r\n\r\nexport default Videoplayer;","import React, {Component,useState} from 'react';\n\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport notFound from './components/404/index';\nimport Home from './components/home';\nimport Episode from './components/episode';\nimport Serie from './components/serie';\nimport Episodes from './components/episodes';\nimport Homepage from './components/homePage';\nimport Videoplayer from './components/videoPlayer';\n\nexport default class App extends Component{\n\n  render(){\n    return(\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Homepage} />\n          <Route exact path='/teste' component={Homepage} />\n          <Route exact path='/episodio/:id' component={Episode} />\n          <Route exact path='/:name' component={Serie} />\n          <Route exact path='/:name/:episode/' component={Episodes} />\n          <Route exact path='/*' component={notFound} />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}